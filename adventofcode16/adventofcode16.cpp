#include <string>
#include <iostream>
#include "adventofcode16.h"
#include "timer.hpp"
#include <future>

void part1()
{
	std::string data = "59766977873078199970107568349014384917072096886862753001181795467415574411535593439580118271423936468093569795214812464528265609129756216554981001419093454383882560114421882354033176205096303121974045739484366182044891267778931831792562035297585485658843180220796069147506364472390622739583789825303426921751073753670825259141712329027078263584903642919122991531729298497467435911779410970734568708255590755424253797639255236759229935298472380039602200033415155467240682533288468148414065641667678718893872482168857631352275667414965503393341925955626006552556064728352731985387163635634298416016700583512112158756656289482437803808487304460165855189";

	std::cout << data.size() << "\n";

	const int pattern[] = { 0, 1, 0, -1 };

	for (int t = 0; t < 100; t++)
	{
		std::string result;
		result.resize(data.size());
		for (int i = 0; i < data.size(); i++)
		{
			long long sum = 0;
			for (int j = 0; j < data.size(); j++)
			{
				int pattern_index = ((j + 1) / (i + 1)) % 4;
				if (pattern[pattern_index] == 0)
				{
					j += i + (j == 0 ? 0 : 1);
					if (j >= data.size())
						break;
				}

				pattern_index = ((j + 1) / (i + 1)) % 4;

				int curr = data[j] - '0';
				sum += curr * pattern[pattern_index];
			}
			if (sum < 0)
				sum = -sum;

			result[i] = std::to_string(sum % 10)[0];
		}
		data = result;
	}
	std::cout << "part1: " << data << "\n";
}

void part2()
{
	Timer timer;
	timer.Restart();
	const int pattern[] = { 0, 1, 0, -1 };

	std::string temp_data = "59766977873078199970107568349014384917072096886862753001181795467415574411535593439580118271423936468093569795214812464528265609129756216554981001419093454383882560114421882354033176205096303121974045739484366182044891267778931831792562035297585485658843180220796069147506364472390622739583789825303426921751073753670825259141712329027078263584903642919122991531729298497467435911779410970734568708255590755424253797639255236759229935298472380039602200033415155467240682533288468148414065641667678718893872482168857631352275667414965503393341925955626006552556064728352731985387163635634298416016700583512112158756656289482437803808487304460165855189";
	std::string data;
	for (int i = 0; i < 10000; i++)
	{
		data += temp_data;
	}

	data = data.substr(5976697);

	std::cout << "data.size = " << data.size() << "\n";

	
	long long count = 0;
	for (int t = 0; t < 100; t++)
	{
		std::string result;
		result.resize(data.size(), 'x');

		result[data.size()-1] = data[data.size() - 1];
		for (long long i = data.size()-2; i >= 0; i--)
		{

			int curr = data[i] - '0';
			int prev = result[i + 1] - '0';
			result[i] = ((curr + prev) % 10) + '0';
		}
		data = result;
	}
	
	std::cout << data.substr(0, 20) << "\n";

	std::cout << timer.Elapsed() << "\n";
}

void main()
{
	//part1();

	part2();
}

