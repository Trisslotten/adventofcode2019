#include <iostream>
#include <vector>
#include <string>


const uint8_t PARAM1_MODE_BIT = 1 << 0;
const uint8_t PARAM2_MODE_BIT = 1 << 1;
const uint8_t PARAM3_MODE_BIT = 1 << 2;
struct Instruction
{
	uint8_t op = 0;
	uint8_t modes = 0;
};

Instruction parseInstruction(int inst)
{
	Instruction result;

	result.op = inst % 100;

	int t = 100;
	for (int i = 2; i < log10(inst) && i < 8; i++)
	{
		int d = (inst / t) % 10;
		if (d == 1)
		{
			result.modes |= 1 << (i - 2);
		}
		t *= 10;
	}
	return result;
}

int main()
{
	/*
	std::string data = "1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,2,6,19,23,1,23,5,27,1,27,13,31,2,6,31,35,1,5,35,39,1,39,10,43,2,6,43,47,1,47,5,51,1,51,9,55,2,55,6,59,1,59,10,63,2,63,9,67,1,67,5,71,1,71,5,75,2,75,6,79,1,5,79,83,1,10,83,87,2,13,87,91,1,10,91,95,2,13,95,99,1,99,9,103,1,5,103,107,1,107,10,111,1,111,5,115,1,115,6,119,1,119,10,123,1,123,10,127,2,127,13,131,1,13,131,135,1,135,10,139,2,139,6,143,1,143,9,147,2,147,6,151,1,5,151,155,1,9,155,159,2,159,6,163,1,163,2,167,1,10,167,0,99,2,14,0,0";

	std::vector<int> immutable;
	while (data.size() > 0)
	{
		size_t next;
		int number = std::stoi(data, &next);

		immutable.push_back(number);

		if (next + 1 > data.size())
			break;
		data = data.substr(1 + next);
	}
	std::vector<int> arr = immutable;
	*/
	std::vector<int> arr = { 3,225,1,225,6,6,1100,1,238,225,104,0,1002,43,69,224,101,-483,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,1101,67,60,225,1102,5,59,225,1101,7,16,225,1102,49,72,225,101,93,39,224,101,-98,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1102,35,82,225,2,166,36,224,101,-4260,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,102,66,48,224,1001,224,-4752,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1001,73,20,224,1001,224,-55,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,1102,18,41,224,1001,224,-738,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1101,68,71,225,1102,5,66,225,1101,27,5,225,1101,54,63,224,1001,224,-117,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,170,174,224,101,-71,224,224,4,224,1002,223,8,223,1001,224,4,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,226,226,224,1002,223,2,223,1006,224,329,1001,223,1,223,1007,226,677,224,102,2,223,223,1006,224,344,1001,223,1,223,108,677,677,224,102,2,223,223,1005,224,359,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,389,101,1,223,223,7,226,226,224,1002,223,2,223,1005,224,404,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1008,226,677,224,102,2,223,223,1006,224,449,1001,223,1,223,7,226,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,494,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,539,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,554,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,584,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,614,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,644,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226 };

	int input = 5;

	size_t counter = 0;
	bool running = true;
	while (running)
	{
		auto inst = parseInstruction(arr[counter]);

		switch (inst.op)
		{
		case 1:
		{
			int a = arr[counter + 1];
			if ((inst.modes & PARAM1_MODE_BIT) == 0)
				a = arr[a];
			int b = arr[counter + 2];
			if ((inst.modes & PARAM2_MODE_BIT) == 0)
				b = arr[b];
			arr[arr[counter + 3]] = a + b;
			counter += 4;
			break;
		}
		case 2:
		{
			int a = arr[counter + 1];
			if ((inst.modes & PARAM1_MODE_BIT) == 0)
				a = arr[a];
			int b = arr[counter + 2];
			if ((inst.modes & PARAM2_MODE_BIT) == 0)
				b = arr[b];
			arr[arr[counter + 3]] = a * b;
			counter += 4;
			break;
		}
		case 3:
		{
			arr[arr[counter + 1]] = input;
			counter += 2;
			break;
		}
		case 4:
		{
			int a = arr[counter + 1];
			if ((inst.modes & PARAM1_MODE_BIT) == 0)
				a = arr[a];
			std::cout << a << "\n";
			counter += 2;
			break;
		}
		case 5:
		{
			int a = arr[counter + 1];
			if ((inst.modes & PARAM1_MODE_BIT) == 0)
				a = arr[a];
			int b = arr[counter + 2];
			if ((inst.modes & PARAM2_MODE_BIT) == 0)
				b = arr[b];

			if (a != 0)
			{
				counter = b;
			}
			else
			{
				counter += 3;
			}
			break;
		}
		case 6:
		{
			int a = arr[counter + 1];
			if ((inst.modes & PARAM1_MODE_BIT) == 0)
				a = arr[a];
			int b = arr[counter + 2];
			if ((inst.modes & PARAM2_MODE_BIT) == 0)
				b = arr[b];

			if (a == 0)
			{
				counter = b;
			}
			else
			{
				counter += 3;
			}
			break;
		}
		case 7:
		{
			int a = arr[counter + 1];
			if ((inst.modes & PARAM1_MODE_BIT) == 0)
				a = arr[a];
			int b = arr[counter + 2];
			if ((inst.modes & PARAM2_MODE_BIT) == 0)
				b = arr[b];

			arr[arr[counter + 3]] = a < b ? 1 : 0;
			counter += 4;
			break;
		}
		case 8:
		{
			int a = arr[counter + 1];
			if ((inst.modes & PARAM1_MODE_BIT) == 0)
				a = arr[a];
			int b = arr[counter + 2];
			if ((inst.modes & PARAM2_MODE_BIT) == 0)
				b = arr[b];

			arr[arr[counter + 3]] = a == b ? 1 : 0;
			counter += 4;
			break;
		}
		case 99:
		{
			running = false;
			break;
		}
		default:
			running = false;
			std::cout << "UNKNOWN OPCODE\n";
			break;
		}
	}

	return 0;
}